# Don't Remove Credit @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot @Tech_VJ
# Ask Doubt on telegram @KingVJ01

# Stream Access Control Commands
# Created by: AI Assistant for enhanced bot functionality

import logging
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database.users_chats_db import db
from info import ADMINS, STREAM_ACCESS_CONTROL, STREAM_ACCESS_USERS
from utils import temp

logger = logging.getLogger(__name__)

@Client.on_message(filters.command("add_stream") & filters.user(ADMINS))
async def add_stream_user(client, message):
    """Add user to stream access list"""
    if len(message.command) < 2:
        await message.reply(
            "<b>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:</b> <code>/add_stream user_id</code>\n\n"
            "<b>‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:</b> <code>/add_stream 123456789</code>"
        )
        return
    
    try:
        user_id = int(message.command[1])
        
        # Check if user already has stream access
        if await db.has_stream_access(user_id):
            await message.reply(f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞ {user_id} ‡¶è‡¶∞ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶Ü‡¶õ‡ßá!</b>")
            return
        
        # Add user to stream access
        await db.add_stream_user(user_id)
        
        # Try to get user info
        try:
            user = await client.get_users(user_id)
            user_mention = user.mention
            user_name = f"({user.first_name})"
        except:
            user_mention = f"<code>{user_id}</code>"
            user_name = ""
        
        await message.reply(
            f"<b>‚úÖ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!</b>\n\n"
            f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</b> {user_mention} {user_name}\n"
            f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:</b> <code>{user_id}</code>\n\n"
            f"<b>‡¶è‡¶ñ‡¶® ‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§</b>"
        )
        
        # Notify user if possible
        try:
            await client.send_message(
                user_id,
                "<b>üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®!</b>\n\n"
                "<b>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!</b>\n\n"
                "<b>‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§</b>"
            )
        except:
            pass
            
    except ValueError:
        await message.reply("<b>‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø! ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§</b>")
    except Exception as e:
        await message.reply(f"<b>‚ùå ‡¶è‡¶∞‡¶∞:</b> <code>{str(e)}</code>")

@Client.on_message(filters.command("remove_stream") & filters.user(ADMINS))
async def remove_stream_user(client, message):
    """Remove user from stream access list"""
    if len(message.command) < 2:
        await message.reply(
            "<b>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:</b> <code>/remove_stream user_id</code>\n\n"
            "<b>‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:</b> <code>/remove_stream 123456789</code>"
        )
        return
    
    try:
        user_id = int(message.command[1])
        
        # Check if user has stream access
        if not await db.has_stream_access(user_id):
            await message.reply(f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞ {user_id} ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡ßá‡¶á!</b>")
            return
        
        # Remove user from stream access
        await db.remove_stream_user(user_id)
        
        # Try to get user info
        try:
            user = await client.get_users(user_id)
            user_mention = user.mention
            user_name = f"({user.first_name})"
        except:
            user_mention = f"<code>{user_id}</code>"
            user_name = ""
        
        await message.reply(
            f"<b>‚ùå ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!</b>\n\n"
            f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</b> {user_mention} {user_name}\n"
            f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:</b> <code>{user_id}</code>\n\n"
            f"<b>‡¶è‡¶ñ‡¶® ‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§</b>"
        )
        
        # Notify user if possible
        try:
            await client.send_message(
                user_id,
                "<b>‚ö†Ô∏è ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø!</b>\n\n"
                "<b>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!</b>\n\n"
                "<b>‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§</b>"
            )
        except:
            pass
            
    except ValueError:
        await message.reply("<b>‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø! ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§</b>")
    except Exception as e:
        await message.reply(f"<b>‚ùå ‡¶è‡¶∞‡¶∞:</b> <code>{str(e)}</code>")

@Client.on_message(filters.command("stream_users") & filters.user(ADMINS))
async def list_stream_users(client, message):
    """List all users with stream access"""
    try:
        # Get users from database
        db_users = await db.get_all_stream_users()
        
        # Get users from config
        config_users = STREAM_ACCESS_USERS if STREAM_ACCESS_CONTROL else []
        
        # Combine and remove duplicates
        all_users = list(set(db_users + config_users + ADMINS))
        
        if not all_users:
            await message.reply("<b>‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡ßá‡¶á!</b>")
            return
        
        text = f"<b>üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü</b>\n\n"
        text += f"<b>‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</b> {len(all_users)}\n\n"
        
        for i, user_id in enumerate(all_users[:20], 1):  # Show max 20 users
            try:
                user = await client.get_users(user_id)
                name = user.first_name
                username = f"@{user.username}" if user.username else "No username"
                text += f"<b>{i}.</b> <a href='tg://user?id={user_id}'>{name}</a> ({username})\n"
                text += f"    <code>{user_id}</code>\n\n"
            except:
                text += f"<b>{i}.</b> <code>{user_id}</code> (Unknown User)\n\n"
        
        if len(all_users) > 20:
            text += f"<b>... ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡ßã {len(all_users) - 20} ‡¶ú‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞</b>"
        
        # Add management buttons
        buttons = [
            [InlineKeyboardButton("üîÑ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂", callback_data="refresh_stream_users")],
            [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await message.reply(f"<b>‚ùå ‡¶è‡¶∞‡¶∞:</b> <code>{str(e)}</code>")

@Client.on_message(filters.command("stream_status") & filters.user(ADMINS))
async def stream_status(client, message):
    """Show stream access control status"""
    try:
        db_count = await db.get_stream_users_count()
        config_count = len(STREAM_ACCESS_USERS) if STREAM_ACCESS_CONTROL else 0
        admin_count = len(ADMINS)
        
        status_text = "üü¢ ‡¶ö‡¶æ‡¶≤‡ßÅ" if STREAM_ACCESS_CONTROL else "üî¥ ‡¶¨‡¶®‡ßç‡¶ß"
        
        text = f"<b>üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏</b>\n\n"
        text += f"<b>‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£:</b> {status_text}\n\n"
        text += f"<b>üìà ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®:</b>\n"
        text += f"‚Ä¢ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {db_count}\n"
        text += f"‚Ä¢ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {config_count}\n"
        text += f"‚Ä¢ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®: {admin_count}\n"
        text += f"‚Ä¢ ‡¶Æ‡ßã‡¶ü: {db_count + config_count + admin_count}\n\n"
        
        if STREAM_ACCESS_CONTROL:
            text += "<b>‚úÖ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá</b>\n"
            text += "<b>‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶∞‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá</b>"
        else:
            text += "<b>‚ö†Ô∏è ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá</b>\n"
            text += "<b>‡¶∏‡¶¨‡¶æ‡¶á ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá</b>"
        
        buttons = [
            [InlineKeyboardButton("üë• ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü", callback_data="show_stream_users")],
            [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await message.reply(f"<b>‚ùå ‡¶è‡¶∞‡¶∞:</b> <code>{str(e)}</code>")

@Client.on_message(filters.command("check_stream") & filters.user(ADMINS))
async def check_stream_access(client, message):
    """Check if a specific user has stream access"""
    if len(message.command) < 2:
        await message.reply(
            "<b>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:</b> <code>/check_stream user_id</code>\n\n"
            "<b>‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:</b> <code>/check_stream 123456789</code>"
        )
        return
    
    try:
        user_id = int(message.command[1])
        has_access = await db.has_stream_access(user_id)
        
        # Try to get user info
        try:
            user = await client.get_users(user_id)
            user_mention = user.mention
            user_name = f"({user.first_name})"
        except:
            user_mention = f"<code>{user_id}</code>"
            user_name = ""
        
        status = "‚úÖ ‡¶Ü‡¶õ‡ßá" if has_access else "‚ùå ‡¶®‡ßá‡¶á"
        
        text = f"<b>üîç ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï</b>\n\n"
        text += f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</b> {user_mention} {user_name}\n"
        text += f"<b>‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø:</b> <code>{user_id}</code>\n"
        text += f"<b>‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏:</b> {status}\n\n"
        
        if has_access:
            text += "<b>‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§</b>"
        else:
            text += "<b>‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§</b>"
        
        await message.reply(text)
        
    except ValueError:
        await message.reply("<b>‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø! ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§</b>")
    except Exception as e:
        await message.reply(f"<b>‚ùå ‡¶è‡¶∞‡¶∞:</b> <code>{str(e)}</code>")

# Callback Query Handlers for Stream Access Management
@Client.on_callback_query(filters.regex("^refresh_stream_users$"))
async def refresh_stream_users_callback(client, query):
    """Refresh stream users list"""
    if query.from_user.id not in ADMINS:
        await query.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á!", show_alert=True)
        return

    try:
        # Get users from database
        db_users = await db.get_all_stream_users()

        # Get users from config
        config_users = STREAM_ACCESS_USERS if STREAM_ACCESS_CONTROL else []

        # Combine and remove duplicates
        all_users = list(set(db_users + config_users + ADMINS))

        if not all_users:
            text = "<b>‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡ßá‡¶á!</b>"
            buttons = [[InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]]
        else:
            text = f"<b>üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü</b>\n\n"
            text += f"<b>‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</b> {len(all_users)}\n\n"

            for i, user_id in enumerate(all_users[:20], 1):  # Show max 20 users
                try:
                    user = await client.get_users(user_id)
                    name = user.first_name
                    username = f"@{user.username}" if user.username else "No username"
                    text += f"<b>{i}.</b> <a href='tg://user?id={user_id}'>{name}</a> ({username})\n"
                    text += f"    <code>{user_id}</code>\n\n"
                except:
                    text += f"<b>{i}.</b> <code>{user_id}</code> (Unknown User)\n\n"

            if len(all_users) > 20:
                text += f"<b>... ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡ßã {len(all_users) - 20} ‡¶ú‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞</b>"

            buttons = [
                [InlineKeyboardButton("üîÑ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂", callback_data="refresh_stream_users")],
                [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]
            ]

        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        await query.answer("‚úÖ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")

    except Exception as e:
        await query.answer(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}", show_alert=True)

@Client.on_callback_query(filters.regex("^show_stream_users$"))
async def show_stream_users_callback(client, query):
    """Show stream users list from status command"""
    if query.from_user.id not in ADMINS:
        await query.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á!", show_alert=True)
        return

    try:
        # Get users from database
        db_users = await db.get_all_stream_users()

        # Get users from config
        config_users = STREAM_ACCESS_USERS if STREAM_ACCESS_CONTROL else []

        # Combine and remove duplicates
        all_users = list(set(db_users + config_users + ADMINS))

        if not all_users:
            text = "<b>‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡ßá‡¶á!</b>"
            buttons = [
                [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back_to_status")],
                [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]
            ]
        else:
            text = f"<b>üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü</b>\n\n"
            text += f"<b>‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</b> {len(all_users)}\n\n"

            for i, user_id in enumerate(all_users[:15], 1):  # Show max 15 users in callback
                try:
                    user = await client.get_users(user_id)
                    name = user.first_name[:20]  # Limit name length
                    text += f"<b>{i}.</b> <a href='tg://user?id={user_id}'>{name}</a>\n"
                    text += f"    <code>{user_id}</code>\n\n"
                except:
                    text += f"<b>{i}.</b> <code>{user_id}</code>\n\n"

            if len(all_users) > 15:
                text += f"<b>... ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡ßã {len(all_users) - 15} ‡¶ú‡¶®</b>\n\n"
                text += "<b>‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /stream_users ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®</b>"

            buttons = [
                [InlineKeyboardButton("üîÑ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂", callback_data="show_stream_users")],
                [InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="back_to_status")],
                [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]
            ]

        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

    except Exception as e:
        await query.answer(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}", show_alert=True)

@Client.on_callback_query(filters.regex("^back_to_status$"))
async def back_to_status_callback(client, query):
    """Go back to stream status"""
    if query.from_user.id not in ADMINS:
        await query.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á!", show_alert=True)
        return

    try:
        db_count = await db.get_stream_users_count()
        config_count = len(STREAM_ACCESS_USERS) if STREAM_ACCESS_CONTROL else 0
        admin_count = len(ADMINS)

        status_text = "üü¢ ‡¶ö‡¶æ‡¶≤‡ßÅ" if STREAM_ACCESS_CONTROL else "üî¥ ‡¶¨‡¶®‡ßç‡¶ß"

        text = f"<b>üìä ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏</b>\n\n"
        text += f"<b>‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£:</b> {status_text}\n\n"
        text += f"<b>üìà ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®:</b>\n"
        text += f"‚Ä¢ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {db_count}\n"
        text += f"‚Ä¢ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {config_count}\n"
        text += f"‚Ä¢ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®: {admin_count}\n"
        text += f"‚Ä¢ ‡¶Æ‡ßã‡¶ü: {db_count + config_count + admin_count}\n\n"

        if STREAM_ACCESS_CONTROL:
            text += "<b>‚úÖ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá</b>\n"
            text += "<b>‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶∞‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá</b>"
        else:
            text += "<b>‚ö†Ô∏è ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶¨‡¶®‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá</b>\n"
            text += "<b>‡¶∏‡¶¨‡¶æ‡¶á ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá</b>"

        buttons = [
            [InlineKeyboardButton("üë• ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü", callback_data="show_stream_users")],
            [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß", callback_data="close_data")]
        ]

        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

    except Exception as e:
        await query.answer(f"‚ùå ‡¶è‡¶∞‡¶∞: {str(e)}", show_alert=True)
